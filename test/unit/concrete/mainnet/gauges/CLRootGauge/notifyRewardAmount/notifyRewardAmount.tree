NotifyRewardAmountIntegrationConcreteTest
├── When the caller is not voter
│   └── It should revert with NotVoter
└── When the caller is voter
    ├── When tail emissions have started
    │   ├── When the amount is greater than defined percentage of tail emissions
    │   │   ├── When the current timestamp is greater than or equal to periodFinish
    │   │   │   ├── It should return excess emissions to minter
    │   │   │   ├── It should wrap the remaining tokens to the XERC20 token
    │   │   │   ├── It should bridge the XERC20 token to the corresponding LeafGauge
    │   │   │   ├── It should update rewardPerTokenStored
    │   │   │   ├── It should deposit the amount of XERC20 token
    │   │   │   ├── It should update the reward rate
    │   │   │   ├── It should cache the updated reward rate for this epoch
    │   │   │   ├── It should update the last update timestamp
    │   │   │   ├── It should update the period finish timestamp
    │   │   │   └── It should emit a {NotifyReward} event
    │   │   └── When the current timestamp is less than periodFinish
    │   │       ├── It should return excess emissions to minter
    │   │       ├── It should wrap the remaining tokens to the XERC20 token
    │   │       ├── It should bridge the XERC20 token to the corresponding LeafGauge
    │   │       ├── It should update rewardPerTokenStored
    │   │       ├── It should deposit the amount of XERC20 token
    │   │       ├── It should update the reward rate, including any existing rewards
    │   │       ├── It should cache the updated reward rate for this epoch
    │   │       ├── It should update the last update timestamp
    │   │       ├── It should update the period finish timestamp
    │   │       └── It should emit a {NotifyReward} event
    │   └── When the amount is smaller than or equal to defined percentage of tail emissions
    │       ├── When the current timestamp is greater than or equal to periodFinish_
    │       │   ├── It should wrap the tokens to the XERC20 token
    │       │   ├── It should bridge the XERC20 token to the corresponding LeafGauge
    │       │   ├── It should update rewardPerTokenStored
    │       │   ├── It should deposit the amount of XERC20 token
    │       │   ├── It should update the reward rate
    │       │   ├── It should cache the updated reward rate for this epoch
    │       │   ├── It should update the last update timestamp
    │       │   ├── It should update the period finish timestamp
    │       │   └── It should emit a {NotifyReward} event
    │       └── When the current timestamp is less than periodFinish_
    │           ├── It should wrap the tokens to the XERC20 token
    │           ├── It should bridge the XERC20 token to the corresponding LeafGauge
    │           ├── It should update rewardPerTokenStored
    │           ├── It should deposit the amount of XERC20 token
    │           ├── It should update the reward rate, including any existing rewards
    │           ├── It should cache the updated reward rate for this epoch
    │           ├── It should update the last update timestamp
    │           ├── It should update the period finish timestamp
    │           └── It should emit a {NotifyReward} event
    └── When tail emissions have not started
        ├── When the amount is greater than defined percentage of weekly emissions
        │   ├── When the current timestamp is greater than or equal to periodFinish__
        │   │   ├── It should return excess emissions to minter
        │   │   ├── It should wrap the remaining tokens to the XERC20 token
        │   │   ├── It should bridge the XERC20 token to the corresponding LeafGauge
        │   │   ├── It should update rewardPerTokenStored
        │   │   ├── It should deposit the amount of XERC20 token
        │   │   ├── It should update the reward rate
        │   │   ├── It should cache the updated reward rate for this epoch
        │   │   ├── It should update the last update timestamp
        │   │   ├── It should update the period finish timestamp
        │   │   └── It should emit a {NotifyReward} event
        │   └── When the current timestamp is less than periodFinish__
        │       ├── It should return excess emissions to minter
        │       ├── It should wrap the remaining tokens to the XERC20 token
        │       ├── It should bridge the XERC20 token to the corresponding LeafGauge
        │       ├── It should update rewardPerTokenStored
        │       ├── It should deposit the amount of XERC20 token
        │       ├── It should update the reward rate, including any existing rewards
        │       ├── It should cache the updated reward rate for this epoch
        │       ├── It should update the last update timestamp
        │       ├── It should update the period finish timestamp
        │       └── It should emit a {NotifyReward} event
        └── When the amount is smaller than or equal to defined percentage of weekly emissions
            ├── When the current timestamp is greater than or equal to periodFinish___
            │   ├── It should wrap the tokens to the XERC20 token
            │   ├── It should bridge the XERC20 token to the corresponding LeafGauge
            │   ├── It should update rewardPerTokenStored
            │   ├── It should deposit the amount of XERC20 token
            │   ├── It should update the reward rate
            │   ├── It should cache the updated reward rate for this epoch
            │   ├── It should update the last update timestamp
            │   ├── It should update the period finish timestamp
            │   └── It should emit a {NotifyReward} event
            └── When the current timestamp is less than periodFinish___
                ├── It should wrap the tokens to the XERC20 token
                ├── It should bridge the XERC20 token to the corresponding LeafGauge
                ├── It should update rewardPerTokenStored
                ├── It should deposit the amount of XERC20 token
                ├── It should update the reward rate, including any existing rewards
                ├── It should cache the updated reward rate for this epoch
                ├── It should update the last update timestamp
                ├── It should update the period finish timestamp
                └── It should emit a {NotifyReward} event
